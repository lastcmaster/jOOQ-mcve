/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.oracle.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function5;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.oracle.Mcve;
import org.jooq.mcve.java.oracle.tables.records.TMimedataReadRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TMimedataRead extends TableImpl<TMimedataReadRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.T_MIMEDATA_READ</code>
     */
    public static final TMimedataRead T_MIMEDATA_READ = new TMimedataRead();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TMimedataReadRecord> getRecordType() {
        return TMimedataReadRecord.class;
    }

    /**
     * The column <code>MCVE.T_MIMEDATA_READ.ID</code>.
     */
    public final TableField<TMimedataReadRecord, String> ID = createField(DSL.name("ID"), SQLDataType.CHAR(22).nullable(false), this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA_READ.TYPE</code>.
     */
    public final TableField<TMimedataReadRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA_READ.SUBTYPE</code>.
     */
    public final TableField<TMimedataReadRecord, String> SUBTYPE = createField(DSL.name("SUBTYPE"), SQLDataType.VARCHAR(128).nullable(false), this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA_READ.NAME</code>.
     */
    public final TableField<TMimedataReadRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA_READ.STORAGE</code>.
     */
    public final TableField<TMimedataReadRecord, byte[]> STORAGE = createField(DSL.name("STORAGE"), SQLDataType.BLOB, this, "");

    private TMimedataRead(Name alias, Table<TMimedataReadRecord> aliased) {
        this(alias, aliased, null);
    }

    private TMimedataRead(Name alias, Table<TMimedataReadRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.view("""
        create view "T_MIMEDATA_READ" as SELECT
        "ID",
        "TYPE",
        "SUBTYPE",
        "NAME",
        COALESCE("STORAGE", TO_BLOB("EXTSTORAGE")) "STORAGE"
        FROM
        "T_MIMEDATA"
        """));
    }

    /**
     * Create an aliased <code>MCVE.T_MIMEDATA_READ</code> table reference
     */
    public TMimedataRead(String alias) {
        this(DSL.name(alias), T_MIMEDATA_READ);
    }

    /**
     * Create an aliased <code>MCVE.T_MIMEDATA_READ</code> table reference
     */
    public TMimedataRead(Name alias) {
        this(alias, T_MIMEDATA_READ);
    }

    /**
     * Create a <code>MCVE.T_MIMEDATA_READ</code> table reference
     */
    public TMimedataRead() {
        this(DSL.name("T_MIMEDATA_READ"), null);
    }

    public <O extends Record> TMimedataRead(Table<O> child, ForeignKey<O, TMimedataReadRecord> key) {
        super(child, key, T_MIMEDATA_READ);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public TMimedataRead as(String alias) {
        return new TMimedataRead(DSL.name(alias), this);
    }

    @Override
    public TMimedataRead as(Name alias) {
        return new TMimedataRead(alias, this);
    }

    @Override
    public TMimedataRead as(Table<?> alias) {
        return new TMimedataRead(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TMimedataRead rename(String name) {
        return new TMimedataRead(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TMimedataRead rename(Name name) {
        return new TMimedataRead(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TMimedataRead rename(Table<?> name) {
        return new TMimedataRead(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, String, byte[]> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function5<? super String, ? super String, ? super String, ? super String, ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function5<? super String, ? super String, ? super String, ? super String, ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
