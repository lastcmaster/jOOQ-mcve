/*
 * This file is generated by jOOQ.
 */
package org.jooq.mcve.java.oracle.tables;


import java.util.function.Function;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.mcve.java.oracle.Keys;
import org.jooq.mcve.java.oracle.Mcve;
import org.jooq.mcve.java.oracle.tables.records.TMimedataRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TMimedata extends TableImpl<TMimedataRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>MCVE.T_MIMEDATA</code>
     */
    public static final TMimedata T_MIMEDATA = new TMimedata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TMimedataRecord> getRecordType() {
        return TMimedataRecord.class;
    }

    /**
     * The column <code>MCVE.T_MIMEDATA.ID</code>.
     */
    public final TableField<TMimedataRecord, String> ID = createField(DSL.name("ID"), SQLDataType.CHAR(22).nullable(false), this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA.TYPE</code>.
     */
    public final TableField<TMimedataRecord, String> TYPE = createField(DSL.name("TYPE"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'application' "), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA.SUBTYPE</code>.
     */
    public final TableField<TMimedataRecord, String> SUBTYPE = createField(DSL.name("SUBTYPE"), SQLDataType.VARCHAR(128).nullable(false).defaultValue(DSL.field(DSL.raw("'octet-stream' "), SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA.NAME</code>.
     */
    public final TableField<TMimedataRecord, String> NAME = createField(DSL.name("NAME"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA.STORAGE</code>.
     */
    public final TableField<TMimedataRecord, byte[]> STORAGE = createField(DSL.name("STORAGE"), SQLDataType.BLOB, this, "");

    /**
     * The column <code>MCVE.T_MIMEDATA.EXTSTORAGE</code>.
     */
    public final TableField<TMimedataRecord, byte[]> EXTSTORAGE = createField(DSL.name("EXTSTORAGE"), SQLDataType.BLOB, this, "");

    private TMimedata(Name alias, Table<TMimedataRecord> aliased) {
        this(alias, aliased, null);
    }

    private TMimedata(Name alias, Table<TMimedataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>MCVE.T_MIMEDATA</code> table reference
     */
    public TMimedata(String alias) {
        this(DSL.name(alias), T_MIMEDATA);
    }

    /**
     * Create an aliased <code>MCVE.T_MIMEDATA</code> table reference
     */
    public TMimedata(Name alias) {
        this(alias, T_MIMEDATA);
    }

    /**
     * Create a <code>MCVE.T_MIMEDATA</code> table reference
     */
    public TMimedata() {
        this(DSL.name("T_MIMEDATA"), null);
    }

    public <O extends Record> TMimedata(Table<O> child, ForeignKey<O, TMimedataRecord> key) {
        super(child, key, T_MIMEDATA);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Mcve.MCVE;
    }

    @Override
    public UniqueKey<TMimedataRecord> getPrimaryKey() {
        return Keys.PK_MIMEDATA;
    }

    @Override
    public TMimedata as(String alias) {
        return new TMimedata(DSL.name(alias), this);
    }

    @Override
    public TMimedata as(Name alias) {
        return new TMimedata(alias, this);
    }

    @Override
    public TMimedata as(Table<?> alias) {
        return new TMimedata(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public TMimedata rename(String name) {
        return new TMimedata(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TMimedata rename(Name name) {
        return new TMimedata(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public TMimedata rename(Table<?> name) {
        return new TMimedata(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, String, String, String, byte[], byte[]> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super String, ? super String, ? super String, ? super byte[], ? super byte[], ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super String, ? super String, ? super String, ? super byte[], ? super byte[], ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
