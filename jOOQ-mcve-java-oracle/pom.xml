<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.jooq</groupId>
        <artifactId>jooq-mcve</artifactId>
        <version>1.0</version>
    </parent>

    <artifactId>jooq-mcve-java-oracle</artifactId>
    <name>jOOQ MCVE for Java with Oracle</name>

    <properties>

        <!-- TODO: Change your jOOQ edition and version here -->
        <org.jooq.groupId>org.jooq.pro</org.jooq.groupId>
        <org.jooq.version>3.18.7</org.jooq.version>
        <testcontainers.version>1.19.1</testcontainers.version>
        <oracle.version>23.3.0.23.09</oracle.version>

        <!-- TODO: Change the database driver configuration here and also in AbstractTest for the tests -->
        <db.username>MCVE</db.username>
        <db.password>MCVE</db.password>

        <!-- TODO: Fix Java versions -->
        <java.version>17</java.version>
    </properties>

    <dependencies>

        <!-- TODO: Add your JDBC driver dependency here -->
        <dependency>
            <groupId>com.oracle.database.jdbc</groupId>
            <artifactId>ojdbc11</artifactId>
            <version>${oracle.version}</version>
        </dependency>
        <dependency>
            <groupId>org.testcontainers</groupId>
            <artifactId>oracle-xe</artifactId>
            <version>${testcontainers.version}</version>
        </dependency>

        <!-- Database access -->
        <dependency>
            <groupId>${org.jooq.groupId}</groupId>
            <artifactId>jooq</artifactId>
            <version>${org.jooq.version}</version>
        </dependency>

        <!-- Init database via liquibase -->
        <dependency>
            <groupId>org.liquibase</groupId>
            <artifactId>liquibase-core</artifactId>
            <version>4.19.1</version>
        </dependency>

        <!-- Logging -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.17.1</version>
        </dependency>

        <!-- Testing -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-toolchains-plugin</artifactId>
                <version>3.1.0</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>toolchain</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <toolchains>
                        <jdk>
                            <version>17</version>
                            <vendor>openjdk</vendor>
                        </jdk>
                    </toolchains>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.11.0</version>
                <configuration>
                    <source>${java.version}</source>
                    <target>${java.version}</target>
                </configuration>
            </plugin>

            <!-- Much better if there was a testcontainers lifecycle management plugin!
                 Upvote here if you like the idea: https://github.com/testcontainers/testcontainers-java/issues/4397 -->
            <plugin>
                <groupId>org.codehaus.gmaven</groupId>
                <artifactId>groovy-maven-plugin</artifactId>
                <version>2.1.1</version>
                <executions>
                    <execution>
                        <id>testcontainer-start</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                import org.testcontainers.utility.*
                                import org.testcontainers.containers.wait.strategy.*

                                db = new org.testcontainers.containers.OracleContainer(DockerImageName.parse("gvenzl/oracle-free").asCompatibleSubstituteFor("gvenzl/oracle-xe")) {
                                        String getSid() { "FREEPDB1" }
                                        String getDatabaseName() { "FREEPDB1" }
                                        void close() { stop() }
                                    }
                                        .withUsername("${db.username}")
                                        .withPassword("${db.password}")
                                        .withEnv("ORACLE_PASSWORD", "${db.password}")
                                        .withEnv("APP_USER", "${db.username}")
                                        .withEnv("APP_USER_PASSWORD", "${db.password}")
                                        .waitingFor(new WaitAllStrategy()
                                            .withStrategy(new LogMessageWaitStrategy()
                                                .withRegEx(".*DATABASE IS READY TO USE!.*"))
                                            .withStrategy(new HostPortWaitStrategy())
                                            .withStartupTimeout(java.time.Duration.ofMinutes(5))
                                        )

                                // Can't use initscript here because of https://github.com/testcontainers/testcontainers-java/issues/7257

                                db.start();
                                project.properties.setProperty('db.url', db.getJdbcUrl());
                                project.properties.setProperty('testcontainer.containerid', db.getContainerId());
                                project.properties.setProperty('testcontainer.imageName', db.getDockerImageName());
                            </source>
                        </configuration>
                    </execution>
                    <execution>
                        <id>testcontainer-stop</id>
                        <phase>test</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                        <configuration>
                            <source>
                                containerId = "${testcontainer.containerid}"
                                imageName = "${testcontainer.imageName}"
                                println("Stopping testcontainer $containerId - $imageName")
                                org.testcontainers.utility.ResourceReaper
                                        .instance()
                                        .stopAndRemoveContainer(containerId, imageName);
                            </source>
                        </configuration>
                    </execution>
                </executions>

                <dependencies>
                    <dependency>
                        <groupId>org.testcontainers</groupId>
                        <artifactId>oracle-xe</artifactId>
                        <version>${testcontainers.version}</version>
                    </dependency>
                    <dependency>
                        <groupId>com.oracle.database.jdbc</groupId>
                        <artifactId>ojdbc11</artifactId>
                        <version>${oracle.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>sql-maven-plugin</artifactId>
                <version>1.5</version>

                <executions>
                    <execution>
                        <id>init-db</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>execute</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <driver>oracle.jdbc.OracleDriver</driver>
                    <url>${db.url}</url>
                    <username>${db.username}</username>
                    <password>${db.password}</password>
                    <srcFiles>
                        <srcFile>${basedir}/src/main/resources/db/migration/init.sql</srcFile>
                    </srcFiles>
                </configuration>

                <dependencies>
                    <dependency>
                        <groupId>com.oracle.database.jdbc</groupId>
                        <artifactId>ojdbc11</artifactId>
                        <version>${oracle.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.liquibase</groupId>
                <artifactId>liquibase-maven-plugin</artifactId>
                <version>4.25.0</version>
                <executions>
                    <execution>
                        <id>init-db</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>update</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <changeLogDirectory>${basedir}/src/main/resources/db/migration/</changeLogDirectory>
                    <changeLogFile>init.xml</changeLogFile>
                    <url>${db.url}</url>
                    <username>${db.username}</username>
                    <password>${db.password}</password>
                </configuration>
                <dependencies>
                    <dependency>
                        <groupId>com.oracle.database.jdbc</groupId>
                        <artifactId>ojdbc11</artifactId>
                        <version>${oracle.version}</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>${org.jooq.groupId}</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>${org.jooq.version}</version>

                <executions>
                    <execution>
                        <id>generate-java</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>

                        <!-- TODO: Possibly edit the code generation configuration here, to reflect what you're doing -->
                        <configuration>
                            <jdbc>
                                <url>${db.url}</url>
                                <user>${db.username}</user>
                                <password>${db.password}</password>
                            </jdbc>
                            <generator>
                                <database>
                                    <includeRoutines>true</includeRoutines>
                                    <includes>.*</includes>
                                    <schemata>
                                        <schema>
                                            <inputSchema>MCVE</inputSchema>
                                        </schema>
                                    </schemata>
                                </database>
                                <generate>
                                    <generatedAnnotation>false</generatedAnnotation>
                                    <routines>true</routines>
                                </generate>
                                <target>
                                    <packageName>org.jooq.mcve.java.oracle</packageName>
                                    <directory>src/main/java</directory>
                                </target>
                            </generator>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>3.2.2</version>
                <configuration>
                    <systemPropertyVariables>
                        <db.url>${db.url}</db.url>
                        <db.username>${db.username}</db.username>
                        <db.password>${db.password}</db.password>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>
</project>
